datasource db {
  provider = "postgresql"  // Use your preferred database provider (PostgreSQL, MySQL, etc.)
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  profile   UserProfile?
  orders    Order[]
  cart      Cart?
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  phone     String?
  address   String?
  city      String?
  country   String?

  // Relation
  user      User     @relation(fields: [userId], references: [id])
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int        @default(0)
  imageUrl    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  categories  Category[] @relation("ProductCategories")
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())

  // Relations
  products  Product[] @relation("ProductCategories")
}

model Order {
  id          Int        @id @default(autoincrement())
  userId      Int
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]

  // One-to-One relation with Payment
  payment     Payment?
  paymentId   Int?       @unique
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int      @default(1)
  price     Float

  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id          Int        @id @default(autoincrement())
  orderId     Int       @unique
  paymentDate DateTime   @default(now())
  amount      Float
  paymentMethod PaymentMethod
  status      PaymentStatus @default(PENDING)

  // Relations
  order       Order     @relation(fields: [orderId], references: [id])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)

  // Relations
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}
